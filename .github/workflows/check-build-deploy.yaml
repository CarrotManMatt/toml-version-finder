name: Check, Build and Deploy TOML Version Finder Server

"on":
    pull_request:
        branches: [main]
    push:
        branches: [main]
        tags: [v*]

jobs:
    uv-check:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5

            - name: Install uv
              uses: astral-sh/setup-uv@v7
              with:
                enable-cache: true

            - name: Check uv.lock (ensure all dependencies up to date)
              run: uv lock --check

    # yamllint disable-line rule:key-ordering
    flake8:
        env:
            UV_FROZEN: true
            UV_NO_SYNC: true
            UV_PYTHON_DOWNLOADS: never
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5

            - name: Set Up Python
              uses: actions/setup-python@v6
              with:
                python-version: 3.14

            - name: Install uv
              uses: astral-sh/setup-uv@v7
              with:
                enable-cache: true

            - name: Run Flake8
              run: uvx --python 3.14 --with flake8-carrot -- flake8

    # yamllint disable-line rule:key-ordering
    mypy:
        env:
            UV_FROZEN: true
            UV_NO_SYNC: true
            UV_PYTHON_DOWNLOADS: never
        needs: [uv-check]
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5

            - name: Set Up Python
              uses: actions/setup-python@v6
              with:
                python-version-file: .python-version

            - name: Install uv
              uses: astral-sh/setup-uv@v7
              with:
                enable-cache: true

            - name: Install mypy From Locked Dependencies
              run: uv sync --no-group dev --group type-check

            - id: store-hashed-python-version
              name: Store Hashed Python Version
              run: echo "hashed_python_version=$(uv run -- python -VV | sha256sum | cut -d' ' -f1)"
                >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              with:
                key: mypy|${{steps.store-hashed-python-version.outputs.hashed_python_version}}
                path: ./.mypy_cache

            - name: Run mypy
              run: uv run -- mypy .  # TODO: Add GitHub workflows output format

    # yamllint disable-line rule:key-ordering
    pre-commit:
        env:
            UV_FROZEN: true
            UV_NO_SYNC: true
            UV_PYTHON_DOWNLOADS: never
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5

            - name: Add GB Locale
              run: |
                sudo apt-get update
                sudo apt-get install -y locales
                sudo locale-gen en_GB.UTF-8
              shell: bash

            - name: Set Up Python
              uses: actions/setup-python@v6
              with:
                python-version-file: .python-version

            - name: Install uv
              uses: astral-sh/setup-uv@v7
              with:
                enable-cache: true

            - name: Install pre-commit From Locked Dependencies
              run: uv sync --only-group pre-commit

            - id: store-hashed-python-version
              name: Store Hashed Python Version
              run: echo "hashed_python_version=$(uv run -- python -VV | sha256sum | cut -d' ' -f1)"
                >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              with:
                key: pre-commit|${{steps.store-hashed-python-version.outputs.hashed_python_version}}|${{hashFiles('.pre-commit-config.yaml')}}
                path: ~/.cache/pre-commit

            - name: Setup pre-commit Environments
              run: uv run -- pre-commit install-hooks

            - name: Save pre-commit Checks Which Require Skipping
              run: echo "SKIP=check-github-workflows,ruff,uv-lock" >> $GITHUB_ENV

            - name: Run pre-commit
              run: uv run -- pre-commit run --all-files --hook-stage manual  # TODO: Add GitHub workflows output format

            - if: ${{!cancelled()}}
              uses: pre-commit-ci/lite-action@v1.1.0

    # yamllint disable-line rule:key-ordering
    ruff-lint:
        env:
            UV_FROZEN: true
            UV_NO_SYNC: true
            UV_PYTHON_DOWNLOADS: never
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v5

            - name: Set Up Python
              uses: actions/setup-python@v6
              with:
                python-version-file: .python-version

            - name: Install uv
              uses: astral-sh/setup-uv@v7
              with:
                enable-cache: true

            - name: Install ruff From Locked Dependencies
              run: uv sync --only-group lint-format

            - id: store-hashed-python-version
              name: Store Hashed Python Version
              run: echo "hashed_python_version=$(uv run -- python -VV | sha256sum | cut -d' ' -f1)"
                >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              with:
                key: ruff|${{steps.store-hashed-python-version.outputs.hashed_python_version}}
                path: ./.ruff_cache

            - name: Run Ruff
              run: uv run -- ruff check --no-fix --output-format=github

    # yamllint disable-line rule:key-ordering
    build-and-publish:
        env:
            IMAGE_NAME: ${{github.repository}}
            REGISTRY: ghcr.io
        environment: publish
        needs: [mypy, pre-commit, ruff-lint, uv-check]
        permissions:
            attestations: write
            contents: read
            id-token: write
            packages: write
        runs-on: ubuntu-latest

        steps:
            - name: Log in to the Container registry
              uses: docker/login-action@v3.6.0
              with:
                password: ${{secrets.GITHUB_TOKEN}}
                registry: ${{env.REGISTRY}}
                username: ${{github.actor}}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - id: docker-extract-metadata
              name: Extract metadata (tags, labels) for Docker
              uses: docker/metadata-action@v5.8.0
              with:
                images: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}
                tags: |-
                    type=ref,event=branch,prefix=br-
                    type=ref,event=pr
                    type=semver,pattern={{version}}
                    type=semver,pattern={{major}}.{{minor}}
                    type=semver,pattern=v{{major}},enable=${{!startsWith(github.ref, 'refs/tags/v0.')}}

            - id: build-and-publish
              name: Build and Publish
              uses: docker/build-push-action@v6
              with:
                labels: ${{steps.docker-extract-metadata.outputs.labels}}
                push: true
                tags: ${{steps.docker-extract-metadata.outputs.tags}}

            - name: Generate Artifact Attestation
              uses: actions/attest-build-provenance@v3
              with:
                push-to-registry: true
                subject-digest: ${{steps.build-and-publish.outputs.digest}}
                subject-name: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}

    # yamllint disable-line rule:key-ordering
    release:
        if: github.ref_type == 'tag'
        needs: [build-and-publish]
        permissions:
            contents: write
            id-token: write
        runs-on: ubuntu-latest

        steps:
            - env:
                GITHUB_TOKEN: ${{ github.token }}
              name: Create GitHub Release
              run: gh release create '${{ github.ref_name }}' --repo '${{github.repository}}' --verify-tag
                --generate-notes
